{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PART I: Patterns and Ruby Chapter1: Building Better Programs with Patterns Patterns for Patterns \u5173\u4e8e\u8bbe\u8ba1\u6a21\u5f0f\u7684\u8457\u540d\u7684\u4e00\u672c\u4e66: Design Patterns: Elements of Reusable Object-Oriented Software \u7b80\u79f0The Gang of Four, \u56e0\u4e3a\u4f5c\u8005\u662f4\u4e2a\u4eba, \u5728\u548c\u4ed6\u4eba\u6c9f\u901a\u8fd9\u672c\u4e66\u7684\u65f6\u5019, \u4e66\u540d\u592a\u957f, \u4e8e\u662f\u53d6\u4e86\u4e00\u4e2a\u7b80\u79f0~ \u5173\u4e8e\u8bbe\u8ba1\u6a21\u5f0f\u67094\u4e2a\u8981\u70b9: Separate out the things that change from those that stay the same. Program to an interface, not an implementation. Prefer composition over inheritance. Delegate, delegate, delegate. Separate out the things that change from those that stay the same \u5c06\u53d8\u5316\u548c\u4e0d\u53d8\u7684\u5206\u79bb\u5f00 Program to an interface, not an implementation \u5f00\u53d1\u63a5\u53e3, \u800c\u4e0d\u662f\u5b9e\u73b0 \u793a\u4f8b: \u4ea4\u901a\u5de5\u5177\u884c\u9a76, \u53ef\u4ee5\u8fd9\u6837\u5b9e\u73b0: # Deal with cars and planes if is_car my_car = Car.new my_car.drive(200) else my_plane = AirPlane.new my_plane.fly(200) end \u7528\u63a5\u53e3\u7684\u65b9\u5f0f\u53ef\u4ee5\u8fd9\u6837\u505a: my_vehicle = get_vehicle my_vehicle.travel(200) Prefer composition over inheritance \u7ee7\u627f\u662f\u8fd9\u6837\u505a\u7684: class Vehicle # All sorts of vehicle-related code... def start_engine # Start the engine end def stop_engine # Stop the engine end end class Car < Vehicle def sunday_drive start_engine # Cruise out into the country and return stop_engine end end car\u7ee7\u627f\u4e86\u7236\u7c7b\u7684start_engine, stop_engine, \u8fd9\u6837\u505a\u7684\u8bdd\u8981\u6c42\u6240\u6709\u7684\u4ea4\u901a\u5de5\u5177\u90fd\u9700\u8981\u5f15\u64ce, \u5982\u679c\u662f\u81ea\u884c\u8f66\u5462, \u90a3\u4e48\u6211\u4eec\u5c31\u9700\u8981\u6539\u9020Vehicle\u4e86. \u6211\u4eec\u53ef\u4ee5\u628aengine\u72ec\u7acb\u51fa\u6765, car\u8fd8\u53ef\u4ee5\u7ee7\u627fVehicle, engine\u662f\u53ef\u9009\u7684\u7ec4\u4ef6: class Engine # All sorts of engine-related code... def start # Start the engine end def stop # Stop the engine end end class Car def initialize @engine = Engine.new end def sunday_drive @engine.start # Cruise out into the country and return... @engine.stop end end Delegate, delegate, delegate \u5728\u7ee7\u627f\u7684\u5b9e\u73b0\u91cc, car\u7ee7\u627f\u4e86Vehicle\u7684start_engine\u548cstop_engine\u65b9\u6cd5, \u90a3\u7528composition\u7684\u65b9\u6cd5\u5b9e\u73b0\u4e4b\u540e, \u600e\u4e48\u5b9e\u73b0\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u5462, \u6211\u4eec\u53ef\u4ee5\u5728Car\u91cc\u5bf9engine\u505aDelegate class Car def initialize @engine = GasolineEngine.new end def start_engine @engine.start end def stop_engine @engine.stop end end You Ain\u2019t Gonna Need It YAGNI , \u5f00\u53d1\u7684\u9996\u8981\u76ee\u7684\u662f\u89e3\u51b3\u95ee\u9898, \u8bbe\u8ba1\u6a21\u5f0f\u662f\u4f60\u89e3\u51b3\u95ee\u9898\u7684\u5de5\u5177, \u4e0d\u8981\u4e3a\u4e86\u8bbe\u8ba1\u6a21\u5f0f\u800c\u53bb\u5f3a\u884c\u8fd0\u7528\u8bbe\u8ba1\u6a21\u5f0f. \u8fc7\u5ea6\u7684\u8fd0\u7528\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u53d8\u5f97\u590d\u6742\u548c\u96be\u61c2. Your code will work better only if it focuses on the job it needs to do right now. Fourteen Out of Twenty-Three 23\u4e2a\u8bbe\u8ba1\u6a21\u5f0f\u4e2d\u5e38\u7528\u768414\u4e2a Template Method Strategy Observer Composite Iterator Command Adapter Proxy Decorator Singleton Factory Method Abstract Factory Builder Interpreter Chapter 2: Getting Started with Ruby \u5982\u679c\u4f60\u5bf9\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u5f88\u719f\u6089, \u800c\u4e14\u719f\u6089Python\u8fd9\u6837\u7684\u52a8\u6001\u8bed\u8a00\u7684\u8bdd, Ruby\u5e94\u8be5\u4e0d\u4f1a\u964c\u751f. \u8fd9\u91cc\u5c31\u4e0d\u518d\u8d58\u8ff0\u4e86. \u4ee3\u7801\u89c4\u8303\u5f80\u5f80\u5f88\u91cd\u8981, \u8fd9\u91cc\u8bf4\u660e\u4e00\u4e0b: Ruby\u7684\u547d\u540d\u89c4\u5219\u662f\u5c0f\u5199\u5b57\u6bcd\u6216\u8005\u5355\u4e0b\u5212\u7ebf\u5f00\u5934, Ruby\u63a8\u8350\u7528\u4e0b\u5212\u7ebf\u7684\u65b9\u5f0f\u547d\u540d, \u4e0d\u63a8\u8350\u9a7c\u5cf0\u547d\u540d\u6cd5. class name\u4f8b\u5916. \u5e38\u91cf\u547d\u540d\u662f\u9996\u5b57\u6bcd\u5927\u5199, \u5e38\u91cf\u4e5f\u53ef\u4ee5\u91cd\u65b0\u8d4b\u503c, Ruby\u4e0d\u505a\u9650\u5236, \u5728irb\u89e3\u91ca\u5668\u91cc\u4f1a\u505a\u63d0\u793a, \u4f46\u662f\u6211\u4eec\u4e3a\u4ec0\u4e48\u8981\u91cd\u65b0\u8d4b\u503c\u5462? PART II Patterns in Ruby Chapter 3: Varying the Algorithm with the Template Method the general idea of the Template Method pattern is to build an abstract base class with a skeletal method. The Template Method pattern is simply a fancy way of saying that if you want to vary an algorithm, one way to do so is to code the invariant part in a base class and to encapsulate the variable parts in methods that are defined by a number of subclasses. The base class can simply leave the methods completely undefined\u2014in that case, the subclasses must supply the methods. Alternatively, the base class can provide a default implementation for the methods that the subclasses can override if they want. Chapter 4: Replacing the Algorithm with the Strategy The Strategy pattern is a delegation-based approach to solving the same problem as the Template Method pattern. Instead of teasing out the variable parts of your algo- rithm and pushing them down into subclasses, you simply implement each version of your algorithm as a separate object Chapter 5: Keeping Up with the Times with the Observer The Observer pattern allows you to build components that know about the activities of other components without having to tightly couple everything together in an unmanageable mess of code-flavored spaghetti. By creating a clean interface between the source of the news (the observable object) and the consumer of that news (the observers), the Observer pattern moves the news without tangling things up. Chapter6: Assembling the Whole from the Parts with the Composite \u7ec4\u5408\u8bbe\u8ba1\u6a21\u5f0f\u5728\u9762\u5bf9\u8fd9\u79cd\u5c42\u7ea7\u7ed3\u6784\u65f6\u662f\u5229\u5668, \u4ed6\u4e3b\u8981\u7684\u76ee\u7684\u662f\u8ba9\u5c42\u7ea7\u7ed3\u6784\u7684\u6240\u6709\u8282\u70b9\u90fd\u662f\u4e00\u6837\u7684, \u4f46\u662f\u53c8\u80fd\u4fdd\u8bc1\u5c42\u7ea7\u7ed3\u6784. \u5728\u73b0\u5b9e\u4e16\u754c\u4e2d\u8fd9\u79cd\u5c42\u7ea7\u7ed3\u6784\u662f\u5982\u6b64\u666e\u904d, \u6240\u4ee5\u7ec4\u5408\u8bbe\u8ba1\u6a21\u5f0f\u4e5f\u5f88\u901a\u7528, \u800c\u4e14\u6709\u7684\u8bbe\u8ba1\u6a21\u5f0f\u5176\u5b9e\u5c31\u662f\u7ec4\u5408\u8bbe\u8ba1\u6a21\u5f0f\u7684\u53d8\u79cd. Chapter7: Reaching into a Collection with the Iterator Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation Chapter8: Getting Things Done with Commands Chapter9: Filling in the Gaps with the Adapter There really is no magic to adapters: They exist to soak up the differences between the interfaces that we need and the objects that we have Chapter10: Getting in Front of Your Object with a Proxy Chapter11: Improving Your Objects with a Decorator what if you simply need to vary the responsibilities of an object? What do you do when sometimes your object needs to do a little more, but sometimes a little less? The Decorator pattern is the last of the \u201cone object stands in for another\u201d patterns that we will consider in this book. The first was the Adapter pattern; it hides the fact that some object has the wrong interface by wrapping it with an object that has the right interface. The second was the Proxy pattern. A proxy also wraps another object, but not with the intent of changing the interface. Instead, the proxy has the same interface as the object that it is wrapping. The proxy isn\u2019t there to translate; it is there to control. Proxies are good for tasks such as enforcing security, hiding the fact that an object really lives across the network, and delaying the creation of the real object until the last possible moment. And then we have the subject of this chapter, the decorator, which enables you to layer features on to a basic object. Chapter12: Making Sure There Is Only One with the Singleton The motivation behind the Singleton pattern is very simple: There are some things that are unique. Programs frequently have a single configuration file. It is not unusual for a program to let you know how it is doing via a single log file. GUI applications frequently have a one main window, and they typically take input from exactly one keyboard. Many applications need to talk to exactly one database. If you only ever have one instance of a class and a lot of code that needs access to that instance, it seems silly to pass the object from one method to another. In this kind of situation, the GoF suggest that you build a singleton \u2014a class that can have only one instance and that provides global access to that one instance. \u6211\u4eec\u53ef\u4ee5\u5728class\u5c42\u9762\u5b9e\u73b0\u5355\u4f8b\u6a21\u5f0f, \u4e5f\u662fGOF\u63a8\u8350\u7684\u6a21\u5f0f, \u4e5f\u53ef\u4ee5\u7528\u5168\u5c40\u53d8\u91cf\u6765\u5b9e\u73b0, \u4f46\u662f\u5728\u552f\u4e00\u6027\u65b9\u9762\u662f\u6b20\u7f3a\u7684. Chapter13: Picking the Right Class with a Factory Chapter14: Easier Object Construction with the Builder Chapter15: Assembling Your System with the Interpreter","title":"Home"},{"location":"#part-i-patterns-and-ruby","text":"","title":"PART I: Patterns and Ruby"},{"location":"#chapter1-building-better-programs-with-patterns","text":"Patterns for Patterns \u5173\u4e8e\u8bbe\u8ba1\u6a21\u5f0f\u7684\u8457\u540d\u7684\u4e00\u672c\u4e66: Design Patterns: Elements of Reusable Object-Oriented Software \u7b80\u79f0The Gang of Four, \u56e0\u4e3a\u4f5c\u8005\u662f4\u4e2a\u4eba, \u5728\u548c\u4ed6\u4eba\u6c9f\u901a\u8fd9\u672c\u4e66\u7684\u65f6\u5019, \u4e66\u540d\u592a\u957f, \u4e8e\u662f\u53d6\u4e86\u4e00\u4e2a\u7b80\u79f0~ \u5173\u4e8e\u8bbe\u8ba1\u6a21\u5f0f\u67094\u4e2a\u8981\u70b9: Separate out the things that change from those that stay the same. Program to an interface, not an implementation. Prefer composition over inheritance. Delegate, delegate, delegate. Separate out the things that change from those that stay the same \u5c06\u53d8\u5316\u548c\u4e0d\u53d8\u7684\u5206\u79bb\u5f00 Program to an interface, not an implementation \u5f00\u53d1\u63a5\u53e3, \u800c\u4e0d\u662f\u5b9e\u73b0 \u793a\u4f8b: \u4ea4\u901a\u5de5\u5177\u884c\u9a76, \u53ef\u4ee5\u8fd9\u6837\u5b9e\u73b0: # Deal with cars and planes if is_car my_car = Car.new my_car.drive(200) else my_plane = AirPlane.new my_plane.fly(200) end \u7528\u63a5\u53e3\u7684\u65b9\u5f0f\u53ef\u4ee5\u8fd9\u6837\u505a: my_vehicle = get_vehicle my_vehicle.travel(200)","title":"Chapter1: Building Better Programs with Patterns"},{"location":"#prefer-composition-over-inheritance","text":"\u7ee7\u627f\u662f\u8fd9\u6837\u505a\u7684: class Vehicle # All sorts of vehicle-related code... def start_engine # Start the engine end def stop_engine # Stop the engine end end class Car < Vehicle def sunday_drive start_engine # Cruise out into the country and return stop_engine end end car\u7ee7\u627f\u4e86\u7236\u7c7b\u7684start_engine, stop_engine, \u8fd9\u6837\u505a\u7684\u8bdd\u8981\u6c42\u6240\u6709\u7684\u4ea4\u901a\u5de5\u5177\u90fd\u9700\u8981\u5f15\u64ce, \u5982\u679c\u662f\u81ea\u884c\u8f66\u5462, \u90a3\u4e48\u6211\u4eec\u5c31\u9700\u8981\u6539\u9020Vehicle\u4e86. \u6211\u4eec\u53ef\u4ee5\u628aengine\u72ec\u7acb\u51fa\u6765, car\u8fd8\u53ef\u4ee5\u7ee7\u627fVehicle, engine\u662f\u53ef\u9009\u7684\u7ec4\u4ef6: class Engine # All sorts of engine-related code... def start # Start the engine end def stop # Stop the engine end end class Car def initialize @engine = Engine.new end def sunday_drive @engine.start # Cruise out into the country and return... @engine.stop end end Delegate, delegate, delegate \u5728\u7ee7\u627f\u7684\u5b9e\u73b0\u91cc, car\u7ee7\u627f\u4e86Vehicle\u7684start_engine\u548cstop_engine\u65b9\u6cd5, \u90a3\u7528composition\u7684\u65b9\u6cd5\u5b9e\u73b0\u4e4b\u540e, \u600e\u4e48\u5b9e\u73b0\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u5462, \u6211\u4eec\u53ef\u4ee5\u5728Car\u91cc\u5bf9engine\u505aDelegate class Car def initialize @engine = GasolineEngine.new end def start_engine @engine.start end def stop_engine @engine.stop end end You Ain\u2019t Gonna Need It YAGNI , \u5f00\u53d1\u7684\u9996\u8981\u76ee\u7684\u662f\u89e3\u51b3\u95ee\u9898, \u8bbe\u8ba1\u6a21\u5f0f\u662f\u4f60\u89e3\u51b3\u95ee\u9898\u7684\u5de5\u5177, \u4e0d\u8981\u4e3a\u4e86\u8bbe\u8ba1\u6a21\u5f0f\u800c\u53bb\u5f3a\u884c\u8fd0\u7528\u8bbe\u8ba1\u6a21\u5f0f. \u8fc7\u5ea6\u7684\u8fd0\u7528\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u53d8\u5f97\u590d\u6742\u548c\u96be\u61c2. Your code will work better only if it focuses on the job it needs to do right now. Fourteen Out of Twenty-Three 23\u4e2a\u8bbe\u8ba1\u6a21\u5f0f\u4e2d\u5e38\u7528\u768414\u4e2a Template Method Strategy Observer Composite Iterator Command Adapter Proxy Decorator Singleton Factory Method Abstract Factory Builder Interpreter","title":"Prefer composition over inheritance"},{"location":"#chapter-2-getting-started-with-ruby","text":"\u5982\u679c\u4f60\u5bf9\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u5f88\u719f\u6089, \u800c\u4e14\u719f\u6089Python\u8fd9\u6837\u7684\u52a8\u6001\u8bed\u8a00\u7684\u8bdd, Ruby\u5e94\u8be5\u4e0d\u4f1a\u964c\u751f. \u8fd9\u91cc\u5c31\u4e0d\u518d\u8d58\u8ff0\u4e86. \u4ee3\u7801\u89c4\u8303\u5f80\u5f80\u5f88\u91cd\u8981, \u8fd9\u91cc\u8bf4\u660e\u4e00\u4e0b: Ruby\u7684\u547d\u540d\u89c4\u5219\u662f\u5c0f\u5199\u5b57\u6bcd\u6216\u8005\u5355\u4e0b\u5212\u7ebf\u5f00\u5934, Ruby\u63a8\u8350\u7528\u4e0b\u5212\u7ebf\u7684\u65b9\u5f0f\u547d\u540d, \u4e0d\u63a8\u8350\u9a7c\u5cf0\u547d\u540d\u6cd5. class name\u4f8b\u5916. \u5e38\u91cf\u547d\u540d\u662f\u9996\u5b57\u6bcd\u5927\u5199, \u5e38\u91cf\u4e5f\u53ef\u4ee5\u91cd\u65b0\u8d4b\u503c, Ruby\u4e0d\u505a\u9650\u5236, \u5728irb\u89e3\u91ca\u5668\u91cc\u4f1a\u505a\u63d0\u793a, \u4f46\u662f\u6211\u4eec\u4e3a\u4ec0\u4e48\u8981\u91cd\u65b0\u8d4b\u503c\u5462?","title":"Chapter 2: Getting Started with Ruby"},{"location":"#part-ii-patterns-in-ruby","text":"","title":"PART II Patterns in Ruby"},{"location":"#chapter-3-varying-the-algorithm-with-the-template-method","text":"the general idea of the Template Method pattern is to build an abstract base class with a skeletal method. The Template Method pattern is simply a fancy way of saying that if you want to vary an algorithm, one way to do so is to code the invariant part in a base class and to encapsulate the variable parts in methods that are defined by a number of subclasses. The base class can simply leave the methods completely undefined\u2014in that case, the subclasses must supply the methods. Alternatively, the base class can provide a default implementation for the methods that the subclasses can override if they want.","title":"Chapter 3: Varying the Algorithm with the Template Method"},{"location":"#chapter-4-replacing-the-algorithm-with-the-strategy","text":"The Strategy pattern is a delegation-based approach to solving the same problem as the Template Method pattern. Instead of teasing out the variable parts of your algo- rithm and pushing them down into subclasses, you simply implement each version of your algorithm as a separate object","title":"Chapter 4: Replacing the Algorithm with the Strategy"},{"location":"#chapter-5-keeping-up-with-the-times-with-the-observer","text":"The Observer pattern allows you to build components that know about the activities of other components without having to tightly couple everything together in an unmanageable mess of code-flavored spaghetti. By creating a clean interface between the source of the news (the observable object) and the consumer of that news (the observers), the Observer pattern moves the news without tangling things up.","title":"Chapter 5: Keeping Up with the Times with the Observer"},{"location":"#chapter6-assembling-the-whole-from-the-parts-with-the-composite","text":"\u7ec4\u5408\u8bbe\u8ba1\u6a21\u5f0f\u5728\u9762\u5bf9\u8fd9\u79cd\u5c42\u7ea7\u7ed3\u6784\u65f6\u662f\u5229\u5668, \u4ed6\u4e3b\u8981\u7684\u76ee\u7684\u662f\u8ba9\u5c42\u7ea7\u7ed3\u6784\u7684\u6240\u6709\u8282\u70b9\u90fd\u662f\u4e00\u6837\u7684, \u4f46\u662f\u53c8\u80fd\u4fdd\u8bc1\u5c42\u7ea7\u7ed3\u6784. \u5728\u73b0\u5b9e\u4e16\u754c\u4e2d\u8fd9\u79cd\u5c42\u7ea7\u7ed3\u6784\u662f\u5982\u6b64\u666e\u904d, \u6240\u4ee5\u7ec4\u5408\u8bbe\u8ba1\u6a21\u5f0f\u4e5f\u5f88\u901a\u7528, \u800c\u4e14\u6709\u7684\u8bbe\u8ba1\u6a21\u5f0f\u5176\u5b9e\u5c31\u662f\u7ec4\u5408\u8bbe\u8ba1\u6a21\u5f0f\u7684\u53d8\u79cd.","title":"Chapter6: Assembling the Whole from the Parts with the Composite"},{"location":"#chapter7-reaching-into-a-collection-with-the-iterator","text":"Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation","title":"Chapter7: Reaching into a Collection with the Iterator"},{"location":"#chapter8-getting-things-done-with-commands","text":"","title":"Chapter8: Getting Things Done with Commands"},{"location":"#chapter9-filling-in-the-gaps-with-the-adapter","text":"There really is no magic to adapters: They exist to soak up the differences between the interfaces that we need and the objects that we have","title":"Chapter9: Filling in the Gaps with the Adapter"},{"location":"#chapter10-getting-in-front-of-your-object-with-a-proxy","text":"","title":"Chapter10: Getting in Front of Your Object with a Proxy"},{"location":"#chapter11-improving-your-objects-with-a-decorator","text":"what if you simply need to vary the responsibilities of an object? What do you do when sometimes your object needs to do a little more, but sometimes a little less? The Decorator pattern is the last of the \u201cone object stands in for another\u201d patterns that we will consider in this book. The first was the Adapter pattern; it hides the fact that some object has the wrong interface by wrapping it with an object that has the right interface. The second was the Proxy pattern. A proxy also wraps another object, but not with the intent of changing the interface. Instead, the proxy has the same interface as the object that it is wrapping. The proxy isn\u2019t there to translate; it is there to control. Proxies are good for tasks such as enforcing security, hiding the fact that an object really lives across the network, and delaying the creation of the real object until the last possible moment. And then we have the subject of this chapter, the decorator, which enables you to layer features on to a basic object.","title":"Chapter11: Improving Your Objects with a Decorator"},{"location":"#chapter12-making-sure-there-is-only-one-with-the-singleton","text":"The motivation behind the Singleton pattern is very simple: There are some things that are unique. Programs frequently have a single configuration file. It is not unusual for a program to let you know how it is doing via a single log file. GUI applications frequently have a one main window, and they typically take input from exactly one keyboard. Many applications need to talk to exactly one database. If you only ever have one instance of a class and a lot of code that needs access to that instance, it seems silly to pass the object from one method to another. In this kind of situation, the GoF suggest that you build a singleton \u2014a class that can have only one instance and that provides global access to that one instance. \u6211\u4eec\u53ef\u4ee5\u5728class\u5c42\u9762\u5b9e\u73b0\u5355\u4f8b\u6a21\u5f0f, \u4e5f\u662fGOF\u63a8\u8350\u7684\u6a21\u5f0f, \u4e5f\u53ef\u4ee5\u7528\u5168\u5c40\u53d8\u91cf\u6765\u5b9e\u73b0, \u4f46\u662f\u5728\u552f\u4e00\u6027\u65b9\u9762\u662f\u6b20\u7f3a\u7684.","title":"Chapter12: Making Sure There Is Only One with the Singleton"},{"location":"#chapter13-picking-the-right-class-with-a-factory","text":"","title":"Chapter13: Picking the Right Class with a Factory"},{"location":"#chapter14-easier-object-construction-with-the-builder","text":"","title":"Chapter14: Easier Object Construction with the Builder"},{"location":"#chapter15-assembling-your-system-with-the-interpreter","text":"","title":"Chapter15: Assembling Your System with the Interpreter"},{"location":"design patterns/Adapter/","text":"\u5047\u8bbe\u6211\u4eec\u6709\u8fd9\u6837\u7684\u4e00\u4e2a\u52a0\u5bc6\u4ee3\u7801: class Encrypter def initialize(key) @key = key end def encrypt(reader, writer) key_index = 0 while not reader.eof? clear_char = reader.getc encrypted_char = (clear_char.ord ^ @key[key_index].ord).chr writer.putc(encrypted_char) key_index = (key_index + 1) % @key.size end end end reader = File.open('message.txt') writer = File.open('message.encrypted', 'w') encrypter = Encrypter.new('my secrect key') encrypter.encrypt(reader, writer) \u6211\u4eec\u53ef\u4ee5\u5bf9\u6587\u4ef6\u8fdb\u884c\u52a0\u5bc6, \u5e76\u8f93\u51fa\u5230\u53e6\u5916\u4e00\u4e2a\u6587\u4ef6. \u52a0\u5165\u6211\u4eec\u9700\u8981\u5bf9\u4e00\u4e2a\u5b57\u7b26\u4e32\u8fdb\u884c\u52a0\u5bc6\u5462? \u53ef\u4ee5\u770b\u89c1, \u5e76\u4e0d\u652f\u6301 \u8fd9\u4e2a\u65f6\u5019\u9002\u914d\u5668\u8bbe\u8ba1\u6a21\u5f0f\u5c31\u53ef\u4ee5\u767b\u573a\u4e86. \u5728\u52a8\u6001\u8bed\u8a00\u91cc, \u6709\u9e2d\u5b50\u7c7b\u578b\u7684\u6982\u5ff5, \u5c31\u662f\u8bf4, \u53ea\u8981\u4e0d\u540c\u7684\u5bf9\u8c61\u6709\u540c\u6837\u7684\u65b9\u6cd5, \u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u89c6\u4e4b\u4e3a\u76f8\u540c\u7684\u5bf9\u8c61(\u53ef\u80fd\u8868\u8fbe\u4e0d\u51c6\u786e2333) \u5bf9\u4e8e\u4e0a\u9762\u7684\u4f8b\u5b50\u6765\u8bf4, \u53ea\u8981\u5bf9\u8c61\u6709\u50cf\u6587\u4ef6\u4e00\u6837\u7684eof?\u548cgetc\u65b9\u6cd5, \u5c31\u53ef\u4ee5\u9002\u7528\u4e8eEncrypter, \u597d, \u90a3\u4e48\u6211\u4eec\u5199\u4e00\u4e2a\u9002\u914d\u5668, \u5bf9\u5b57\u7b26\u4e32\u8fdb\u884c\u5c01\u88c5: class StringIOAdapter def initialize(string) @string = string @position = 0 end def getc if @position >= @string.length raise EOFError end ch = @string[@position] @position += 1 return ch end def eof? return @position >= @string.length end end encrypter = Encrypter.new('XYZZY') reader = StringIOAdapter.new('We attack a dawn') writer=File.open('out.txt', 'w') encrypter.encrypt(reader, writer) \u8fd9\u4e2a\u5c31\u662f\u9002\u914d\u5668\u8bbe\u8ba1\u6a21\u5f0f: There really is no magic to adapters: They exist to soak up the differences between the interfaces that we need and the objects that we have. The Adapter pattern is the first member of a family of patterns we will encounter\u2014a family of patterns in which one object stands in for another object. This family of object-oriented impostors also includes proxies and decorators. In each case, an object acts more or less as the front man for another object. As you will see in sub- sequent chapters, in each of these patterns the code will look vaguely familiar. At the risk of repeating myself, keep in mind that a pattern is not just about code: Intent is critical. An adapter is an adapter only if you are stuck with objects that have the wrong interface and you are trying to keep the pain of dealing with these ill-fitting interfaces from spreading throughout your system.","title":"Adapter"},{"location":"design patterns/Builder/","text":"\u5047\u8bbe\u6211\u4eec\u8981\u7ec4\u88c5\u4e00\u53f0\u7535\u8111, \u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u5199: class Computer attr_accessor :display attr_accessor :motherboard attr_reader :drives def initialize(display=:crt, motherboard=Motherboard.new, drives=[]) @motherboard = motherboard @drives = drives @display = display end end class CPU # Common CPU stuff... end class BasicCPU < CPU # Lots of not very fast CPU-related stuff... end class TurboCPU < CPU # Lots of very fast CPU stuff... end class Motherboard attr_accessor :cpu attr_accessor :memory_size def initialize(cpu=BasicCPU.new, memory_size=1000) @cpu = cpu @memory_size = memory_size end end class Drive attr_reader :type # either :hard_disk, :cd or :dvd attr_reader :size # in MB attr_reader :writable # true if this drive is writable def initialize(type, size, writable) @type = type @size = size @writable = writable end end # Build a fast computer with lots of memory... motherboard = Motherboard.new(TurboCPU.new, 4000) # ... and a hard drive, a CD writer, and a DVD drives = [] drives << Drive.new(:hard_drive, 200000, true) drives << Drive.new(:cd, 760, true) drives << Drive.new(:dvd, 4700, false) computer = Computer.new(:lcd, motherboard, drives) \u6211\u4eec\u521b\u5efa\u4e86\u5f88\u591a\u590d\u6742\u7684\u7c7b\u6765\u8868\u793a\u7535\u8111\u7ec4\u4ef6, \u7136\u540e\u7528\u4e00\u8fde\u4e32\u7684\u64cd\u4f5c\u6765\u7ec4\u88c5\u7535\u8111, \u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e00\u8fde\u4e32\u7684\u7ec4\u88c5\u6574\u5408\u5728\u4e00\u8d77: class ComputerBuilder attr_reader :computer def initialize @computer = Computer.new end def turbo(has_turbo_cpu=true) @computer.motherboard.cpu = TurboCPU.new end def display=(display) @computer.display=displau end def memory_size=(size_in_mb) @computer.motherboard.memory_size = size_in_mb end def add_cd(writer=false) @computer.drives << Drive.new(:cd, 760, writer) end def add_dvd(writer=false) @computer.drives << Drive.new(:dvd, 4000, writer) end def add_hard_disk(size_in_mb) @computer.drives << Drive.new(:hard_disk, size_in_mb, true) end end builder = ComputerBuilder.new builder.turbo builder.add_cd(true) builder.add_dvd builder.add_hard_disk(100000) computer = Builder.computer \u8fd9\u6837\u7684\u6784\u5efa\u907f\u514d\u4e86\u9009\u62e9\u6b63\u786e\u7684class\u7684\u95ee\u9898, \u6211\u4eec\u53ea\u9700\u5173\u6ce8\u5982\u4f55\u914d\u7f6e. \u800c\u4e14\u8fd8\u80fd\u4fdd\u8bc1\u6784\u5efa\u51fa\u5b8c\u7f8e\u7684\u5bf9\u8c61, \u6bd4\u5982\u6211\u4eec\u5728builder\u91cc\u589e\u52a0\u68c0\u67e5, \u6ca1\u6709CPU\u5219\u62a5\u9519. \u5982\u679c\u521b\u5efa\u5bf9\u8c61\u5f88\u7b80\u5355, \u914d\u7f6e\u5f88\u5c11, \u6211\u4eec\u5c31\u4e0d\u8981\u6ee5\u7528\u6784\u5efa\u8bbe\u8ba1\u6a21\u5f0f\u4e86.\u53ea\u6709\u5728\u6784\u5efa\u5f88\u590d\u6742\u7684\u60c5\u51b5\u4e0b, \u624d\u5e94\u8003\u8651\u8fd9\u4e2a\u8bbe\u8ba1\u6a21\u5f0f.","title":"Builder"},{"location":"design patterns/Command/","text":"\u6211\u4eec\u8fd8\u662f\u8bf4\u5177\u4f53\u7684\u573a\u666f, \u5728GUI\u91cc\u9762\u7684\u4e00\u4e2a\u6309\u94ae, \u4e0d\u540c\u7684\u573a\u666f\u4e0b\u9700\u8981\u70b9\u51fb\u6309\u94ae\u6267\u884c\u4e0d\u540c\u7684\u64cd\u4f5c, \u719f\u6089\u7684\u573a\u666f, \u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u6a21\u677f\u8bbe\u8ba1\u6a21\u5f0f, \u7136\u540e\u7528\u7b56\u7565\u8bbe\u8ba1\u6a21\u5f0f\u8fdb\u884c\u4f18\u5316: class SlickButton attr_accessor :command def initialize(command) @command = command end # # Lots of button drawing and management # code omitted... # def on_button_push @command.execute if @command end end class SaveCommand def execute # # Save the current document... # end end save_button = SlickButton.new( SaveCommand.new ) \u547d\u4ee4\u8bbe\u8ba1\u6a21\u5f0f\u5f53\u7136\u5e76\u4e0d\u5355\u5355\u53ea\u662f\u5982\u6b64 \u5047\u8bbe\u6211\u4eec\u8981\u6267\u884c\u7684\u64cd\u4f5c\u6bd4\u8f83\u590d\u6742\u5462, \u521b\u5efa\u4e00\u4e2a\u6587\u4ef6, \u590d\u5236, \u7136\u540e\u5220\u9664\u539f\u6587\u4ef6, \u6211\u4eec\u5e94\u8be5\u600e\u6837\u5b9e\u73b0\u8fd9\u4e2acommand\u5462 class Command attr_reader :description def initialize(description) @description = description end def execute end end class CreateFile < Command def initialize(path, contents) super(\"Create file: #{path}\") @path = path @contents = contents end def execute f = File.open(@path, \"w\") f.write(@contents) f.close end end class DeleteFile < Command def initialize(path) super(\"Delete file: #{path}\") @path = path end def execute File.delete(@path) end end class CopyFile < Command def initialize(source, target) super(\"Copy file: #{source} to #{target}\") @source = source @target = target end def execute FileUtils.copy(@source, @target) end end class CompositeCommand < Command def initialize @commands = [] end def add_command(cmd) @commands << cmd end def execute @commands.each {|cmd| cmd.execute} end def description description = '' @commands.each {|cmd| description += cmd.description + \"\\n\"} description end end cmds = CompositeCommand.new cmds.add_command(CreateFile.new('file1.txt', \"hello world\\n\")) cmds.add_command(CopyFile.new('file1.txt', 'file2.txt')) cmds.add_command(DeleteFile.new('file1.txt')) \u8fd9\u91cc\u53c8\u6709\u4e00\u70b9\u50cf\u89c2\u5bdf\u8005\u6a21\u5f0f. \u6240\u4ee5\u547d\u4ee4\u8bbe\u8ba1\u6a21\u5f0f\u5176\u5b9e\u662f\u5404\u79cd\u8bbe\u8ba1\u6a21\u5f0f\u7684\u7ec4\u5408\u53d8\u5316. \u4f46\u662f\u5404\u4e2a\u8bbe\u8ba1\u6a21\u5f0f\u6709\u4e0d\u540c\u7684\u5e94\u7528\u573a\u666f. \u4f46\u662f\u8fd9\u4e09\u4e2a\u64cd\u4f5c\u662f\u6709\u8054\u7cfb\u7684, \u9488\u5bf9\u7684\u662f\u76f8\u5173\u7684\u6587\u4ef6. \u6587\u4ef6\u53c8\u662f\u53ef\u4ee5\u914d\u7f6e\u7684. \u53ef\u4ee5\u7075\u6d3b\u914d\u7f6e\u548c\u7ec4\u5408. \u6240\u4ee5\u5728\u4e00\u4e9b\u590d\u6742\u7684\u4e8b\u52a1\u91cc\u9762\u53ef\u4ee5\u7528\u5230\u547d\u4ee4\u6a21\u5f0f","title":"Command"},{"location":"design patterns/Composite/","text":"Composite design pattern in Ruby\u7ec4\u5408\u8bbe\u8ba1\u6a21\u5f0f \u6211\u4eec\u5728\u5b9e\u9645\u9879\u76ee\u4e2d\u7ecf\u5e38\u4f1a\u9047\u5230\u5c42\u7ea7\u6811\u72b6\u7ed3\u6784\u7684\u6a21\u578b, \u5728\u5b9e\u9645\u751f\u6d3b\u4e2d\u4e5f\u7ecf\u5e38\u9047\u5230, \u6bd4\u5982\u516c\u53f8\u7684\u90e8\u95e8\u5c42\u7ea7\u7b49\u7b49, \u6211\u4eec\u5728\u8fd9\u91cc\u4ee5\u505a\u86cb\u7cd5\u4e3e\u4f8b, \u6211\u4eec\u9700\u8981\u4e86\u89e3\u5230\u505a\u86cb\u7cd5\u7684\u6b65\u9aa4, \u8ddf\u8e2a\u6bcf\u4e00\u6b65\u7684\u65f6\u95f4, \u62bd\u8c61\u6210\u4e00\u5f20\u56fe\u6bd4\u8f83\u4e00\u76ee\u4e86\u7136: \u505a\u86cb\u7cd5\u4e5f\u53ef\u4ee5\u62bd\u8c61\u6210\u5c42\u7ea7\u7ed3\u6784, \u90a3\u4e48\u6211\u4eec\u6309\u7167\u7ec4\u5408\u8bbe\u8ba1\u6a21\u5f0f\u5e94\u8be5\u600e\u4e48\u505a\u5462: First, you need a common interface or base class for all of your objects. The GoF call this base class or interface the component \u6211\u4eec\u9700\u8981\u627e\u5230\u6240\u6709\u8282\u70b9\u7684\u5171\u6027, \u6765\u521b\u5efa\u4e00\u4e2a\u57fa\u7c7b, \u8fd9\u4e2a\u57fa\u7c7b\u6210\u4e3a component \u5143\u4ef6, \u5728\u8fd9\u91cc, \u57fa\u7c7b\u9700\u8981\u521d\u59cb\u5316\u505a\u86cb\u7cd5\u5404\u4e2a\u5206\u89e3\u4efb\u52a1\u7684\u540d\u79f0, \u5df2\u7ecf\u8fd9\u4e2a\u4efb\u52a1\u6240\u9700\u8981\u7684\u65f6\u95f4 ```ruby class Task attr_reader :name def initialize(name) @name = name end def get_time_required 0.0 end end ``` Second, you need one or more leaf classes \u6211\u4eec\u521b\u5efa\u6700\u5e95\u5c42\u7684\u5b50\u8282\u70b9\u7684\u7c7b, \u7ee7\u627f\u57fa\u7c7b ```ruby class AddDryIngredientsTask < Task def initialize super('Add dry ingredients') end def get_time_required 1.0 # 1 minute to add flour and sugar end end class AddLiquidTask < Task def initialize super('Add liquid') end def get_time_required 1.0 end end class MixTask < Task def initialize super('Mix that batter up!') end def get_time_required 3.0 # Mix for 3 minutes end end ``` Third, we need at least one higher-level class, which the GoF call the composite class \u521b\u5efa\u9ad8\u4e00\u7ea7\u7684\u7c7b, \u8fd9\u4e2a\u7c7b\u8ddf\u6700\u5e95\u5c42\u7684\u7c7b\u5c31\u4e0d\u592a\u4e00\u6837\u4e86 ```ruby class MakeBatterTask < Task def initialize super('Make batter') @sub_tasks = [] add_sub_task( AddDryIngredientsTask.new ) add_sub_task( AddLiquidsTask.new ) add_sub_task( MixTask.new ) end def add_sub_task(task) @sub_tasks << task end def remove_sub_task(task) @sub_tasks.delete(task) end def get_time_required time=0.0 @sub_tasks.each {|task| time += task.get_time_required} time end end ``` \u8fd9\u91cc\u6211\u4eec\u9700\u8981\u7528\u5230\u7b56\u7565\u8bbe\u8ba1\u6a21\u5f0f, \u628a\u6dfb\u52a0\u5220\u9664\u5b50\u4efb\u52a1\u7684\u529f\u80fd\u72ec\u7acb\u51fa\u6765, \u4f18\u5316\u5982\u4e0b: Because we will have a number of composite tasks in our baking example (pack- aging the cake as well as the master task of manufacturing the cake), it makes sense to factor out the details of managing the child tasks into another base class: ```ruby class CompositeTask < Task def initialize(name) super(name) @sub_tasks = [] end def add_sub_task(task) @sub_tasks << task end def remove_sub_task(task) @sub_tasks.delete(task) end def get_time_required time=0.0 @sub_tasks.each {|task| time += task.get_time_required} time end end ``` Our MakeBatterTask then reduces to the following code: ruby class MakeBatterTask < CompositeTask def initialize super('Make batter') add_sub_task( AddDryIngredientsTask.new ) add_sub_task( AddLiquidsTask.new ) add_sub_task( MixTask.new ) end end The key point to keep in mind about composite objects is that the tree may be arbitrarily deep. Any one of the subtasks of MakeCakeTask might be a composite. \u7ec4\u5408\u8bbe\u8ba1\u6a21\u5f0f\u5728\u9762\u5bf9\u8fd9\u79cd\u5c42\u7ea7\u7ed3\u6784\u65f6\u662f\u5229\u5668, \u4ed6\u4e3b\u8981\u7684\u76ee\u7684\u662f\u8ba9\u5c42\u7ea7\u7ed3\u6784\u7684\u6240\u6709\u8282\u70b9\u90fd\u662f\u4e00\u6837\u7684, \u4f46\u662f\u53c8\u80fd\u4fdd\u8bc1\u5c42\u7ea7\u7ed3\u6784. \u5728\u73b0\u5b9e\u4e16\u754c\u4e2d\u8fd9\u79cd\u5c42\u7ea7\u7ed3\u6784\u662f\u5982\u6b64\u666e\u904d, \u6240\u4ee5\u7ec4\u5408\u8bbe\u8ba1\u6a21\u5f0f\u4e5f\u5f88\u901a\u7528, \u800c\u4e14\u6709\u7684\u8bbe\u8ba1\u6a21\u5f0f\u5176\u5b9e\u5c31\u662f\u7ec4\u5408\u8bbe\u8ba1\u6a21\u5f0f\u7684\u53d8\u79cd.","title":"Composite"},{"location":"design patterns/Composite/#composite-design-pattern-in-ruby","text":"\u6211\u4eec\u5728\u5b9e\u9645\u9879\u76ee\u4e2d\u7ecf\u5e38\u4f1a\u9047\u5230\u5c42\u7ea7\u6811\u72b6\u7ed3\u6784\u7684\u6a21\u578b, \u5728\u5b9e\u9645\u751f\u6d3b\u4e2d\u4e5f\u7ecf\u5e38\u9047\u5230, \u6bd4\u5982\u516c\u53f8\u7684\u90e8\u95e8\u5c42\u7ea7\u7b49\u7b49, \u6211\u4eec\u5728\u8fd9\u91cc\u4ee5\u505a\u86cb\u7cd5\u4e3e\u4f8b, \u6211\u4eec\u9700\u8981\u4e86\u89e3\u5230\u505a\u86cb\u7cd5\u7684\u6b65\u9aa4, \u8ddf\u8e2a\u6bcf\u4e00\u6b65\u7684\u65f6\u95f4, \u62bd\u8c61\u6210\u4e00\u5f20\u56fe\u6bd4\u8f83\u4e00\u76ee\u4e86\u7136: \u505a\u86cb\u7cd5\u4e5f\u53ef\u4ee5\u62bd\u8c61\u6210\u5c42\u7ea7\u7ed3\u6784, \u90a3\u4e48\u6211\u4eec\u6309\u7167\u7ec4\u5408\u8bbe\u8ba1\u6a21\u5f0f\u5e94\u8be5\u600e\u4e48\u505a\u5462: First, you need a common interface or base class for all of your objects. The GoF call this base class or interface the component \u6211\u4eec\u9700\u8981\u627e\u5230\u6240\u6709\u8282\u70b9\u7684\u5171\u6027, \u6765\u521b\u5efa\u4e00\u4e2a\u57fa\u7c7b, \u8fd9\u4e2a\u57fa\u7c7b\u6210\u4e3a component \u5143\u4ef6, \u5728\u8fd9\u91cc, \u57fa\u7c7b\u9700\u8981\u521d\u59cb\u5316\u505a\u86cb\u7cd5\u5404\u4e2a\u5206\u89e3\u4efb\u52a1\u7684\u540d\u79f0, \u5df2\u7ecf\u8fd9\u4e2a\u4efb\u52a1\u6240\u9700\u8981\u7684\u65f6\u95f4 ```ruby class Task attr_reader :name def initialize(name) @name = name end def get_time_required 0.0 end end ``` Second, you need one or more leaf classes \u6211\u4eec\u521b\u5efa\u6700\u5e95\u5c42\u7684\u5b50\u8282\u70b9\u7684\u7c7b, \u7ee7\u627f\u57fa\u7c7b ```ruby class AddDryIngredientsTask < Task def initialize super('Add dry ingredients') end def get_time_required 1.0 # 1 minute to add flour and sugar end end class AddLiquidTask < Task def initialize super('Add liquid') end def get_time_required 1.0 end end class MixTask < Task def initialize super('Mix that batter up!') end def get_time_required 3.0 # Mix for 3 minutes end end ``` Third, we need at least one higher-level class, which the GoF call the composite class \u521b\u5efa\u9ad8\u4e00\u7ea7\u7684\u7c7b, \u8fd9\u4e2a\u7c7b\u8ddf\u6700\u5e95\u5c42\u7684\u7c7b\u5c31\u4e0d\u592a\u4e00\u6837\u4e86 ```ruby class MakeBatterTask < Task def initialize super('Make batter') @sub_tasks = [] add_sub_task( AddDryIngredientsTask.new ) add_sub_task( AddLiquidsTask.new ) add_sub_task( MixTask.new ) end def add_sub_task(task) @sub_tasks << task end def remove_sub_task(task) @sub_tasks.delete(task) end def get_time_required time=0.0 @sub_tasks.each {|task| time += task.get_time_required} time end end ``` \u8fd9\u91cc\u6211\u4eec\u9700\u8981\u7528\u5230\u7b56\u7565\u8bbe\u8ba1\u6a21\u5f0f, \u628a\u6dfb\u52a0\u5220\u9664\u5b50\u4efb\u52a1\u7684\u529f\u80fd\u72ec\u7acb\u51fa\u6765, \u4f18\u5316\u5982\u4e0b: Because we will have a number of composite tasks in our baking example (pack- aging the cake as well as the master task of manufacturing the cake), it makes sense to factor out the details of managing the child tasks into another base class: ```ruby class CompositeTask < Task def initialize(name) super(name) @sub_tasks = [] end def add_sub_task(task) @sub_tasks << task end def remove_sub_task(task) @sub_tasks.delete(task) end def get_time_required time=0.0 @sub_tasks.each {|task| time += task.get_time_required} time end end ``` Our MakeBatterTask then reduces to the following code: ruby class MakeBatterTask < CompositeTask def initialize super('Make batter') add_sub_task( AddDryIngredientsTask.new ) add_sub_task( AddLiquidsTask.new ) add_sub_task( MixTask.new ) end end The key point to keep in mind about composite objects is that the tree may be arbitrarily deep. Any one of the subtasks of MakeCakeTask might be a composite. \u7ec4\u5408\u8bbe\u8ba1\u6a21\u5f0f\u5728\u9762\u5bf9\u8fd9\u79cd\u5c42\u7ea7\u7ed3\u6784\u65f6\u662f\u5229\u5668, \u4ed6\u4e3b\u8981\u7684\u76ee\u7684\u662f\u8ba9\u5c42\u7ea7\u7ed3\u6784\u7684\u6240\u6709\u8282\u70b9\u90fd\u662f\u4e00\u6837\u7684, \u4f46\u662f\u53c8\u80fd\u4fdd\u8bc1\u5c42\u7ea7\u7ed3\u6784. \u5728\u73b0\u5b9e\u4e16\u754c\u4e2d\u8fd9\u79cd\u5c42\u7ea7\u7ed3\u6784\u662f\u5982\u6b64\u666e\u904d, \u6240\u4ee5\u7ec4\u5408\u8bbe\u8ba1\u6a21\u5f0f\u4e5f\u5f88\u901a\u7528, \u800c\u4e14\u6709\u7684\u8bbe\u8ba1\u6a21\u5f0f\u5176\u5b9e\u5c31\u662f\u7ec4\u5408\u8bbe\u8ba1\u6a21\u5f0f\u7684\u53d8\u79cd.","title":"Composite design pattern in Ruby\u7ec4\u5408\u8bbe\u8ba1\u6a21\u5f0f"},{"location":"design patterns/Decorator/","text":"what if you simply need to vary the responsibilities of an object? What do you do when sometimes your object needs to do a little more, but sometimes a little less? The Decorator pattern is the last of the \u201cone object stands in for another\u201d patterns that we will consider in this book. The first was the Adapter pattern; it hides the fact that some object has the wrong interface by wrapping it with an object that has the right interface. The second was the Proxy pattern. A proxy also wraps another object, but not with the intent of changing the interface. Instead, the proxy has the same interface as the object that it is wrapping. The proxy isn\u2019t there to translate; it is there to control. Proxies are good for tasks such as enforcing security, hiding the fact that an object really lives across the network, and delaying the creation of the real object until the last possible moment. And then we have the subject of this chapter, the decorator, which enables you to layer features on to a basic object.","title":"Decorator"},{"location":"design patterns/Factory/","text":"\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u6a21\u62df\u9e2d\u5b50\u7684\u7c7b: class Duck def initialize(name) @name = name end def eat puts(\"Duck #{@name} is eatings.\") end def speak puts(\"Duck #{@name} says Quack!\") end def sleep puts(\"Duck #{@name} sleeps quitely.\") end end \u8fd8\u6709\u4e00\u4e2a\u6a21\u62df\u9e2d\u5b50\u5728\u6c60\u5858\u91cc\u751f\u6d3b\u7684\u7c7b: class Pond def initialize(number_ducks) @ducks = [] number_ducks.times do |i| duck = Duck.new(\"Duck#{i}\") @ducks << duck end end def simulate_one_day @ducks.each {|duck| duck.speak} @ducks.each {|duck| duck.eat} @ducks.each {|duck| duck.sleep} end end pond = Pond.new(3) pond.simulate_one_day \u5f88\u5b8c\u7f8e, \u77e5\u9053\u6709\u4e00\u5929, \u6709\u65b0\u7684\u9700\u6c42, \u6211\u4eec\u8fd8\u8981\u6a21\u62df\u5728\u6c60\u5858\u91cc\u751f\u6d3b\u7684\u9752\u86d9, \u9752\u86d9\u7684\u7c7b\u548c\u9e2d\u5b50\u7c7b\u4f3c: class Frog def initialize(name) @name = name end def eat puts(\"Frog #{@name} is eatings.\") end def speak puts(\"Frog #{@name} says Crooooaaaak!\") end def sleep puts(\"Frog #{@name} doesn't sleep; he crosks all night!\") end end \u90a3\u4e48\u600e\u4e48\u6a21\u62df\u9752\u86d9\u5728\u6c60\u5858\u751f\u6d3b\u5462? \u4fee\u6539Pond\u7c7b\u5417? Pond\u7c7b\u8981\u517c\u5bb9\u4e24\u8005, \u6211\u4eec\u53ef\u4ee5\u7528Template\u6a21\u677f\u8bbe\u8ba1\u6a21\u5f0f\u6765\u505a, Pond\u6539\u6210\u4e00\u4e2a\u57fa\u7c7b, \u7136\u540e\u521b\u5efa\u4e24\u4e2a\u5b50\u7c7b, \u5982\u4e0b\u6240\u793a: class Pond def initialize(number_animals) @animals = [] number_animals.times do |i| animal = new_animal(\"Animal#{i}\") @animals << animal end end def simulate_one_day @animals.each {|animal| animal.speak} @animals.each {|animal| animal.eat} @animals.each {|animal| animal.sleep} end end class DuckPond < Pond def new_animal(name) Duck.new(name) end end class FrogPond < Pond def new_animal(name) Frog.new(name) end end pond = FrogPond.new(3) pond.simulate_one_day \u6211\u4eec\u7528\u8fd9\u5f20\u56fe\u8001\u8bf4\u660e\u5de5\u5382\u6a21\u5f0f: creator\u5c31\u662fPond class, DuckPond\u548cFrogPond\u5c31\u662fConcreteCreator, Duck class\u548cFrog Class\u5c31\u662fproducts, \u4ed6\u4eec\u6709\u4e00\u4e2a\u57fa\u7c7b(\u8fd9\u91cc\u9700\u8981\u8bf4\u660e\u4e00\u4e0b, \u867d\u7136\u4e24\u8005\u6ca1\u6709\u663e\u5f0f\u7684\u7ee7\u627f\u540c\u4e00\u4e2a\u57fa\u7c7b, \u4f46\u662f\u4e24\u8005\u90fd\u6709\u540c\u6837\u7684\u65b9\u6cd5\u96c6, \u53ef\u4ee5\u89c6\u4e3a\u540c\u6837\u7684\u7c7b) \u770b\u5230\u8fd9\u91cc, \u6211\u4eec\u6709\u4e2a\u7591\u95ee, \u8fd9\u548cTemplate\u6a21\u677f\u8bbe\u8ba1\u6a21\u5f0f\u6709\u4ec0\u4e48\u533a\u522b\u5462? \u5de5\u5382\u8bbe\u8ba1\u6a21\u5f0f\u53ea\u662f\u628a\u521b\u5efa\u5b9e\u4f8b\u4f5c\u4e3a\u72ec\u7acb\u51fa\u6765\u7684\u65b9\u6cd5\u653e\u5728\u5b50\u7c7b\u4e2d\u4e86, \u5176\u4ed6\u548c\u6a21\u677f\u8bbe\u8ba1\u6a21\u5f0f\u4e00\u6837. \u6ca1\u6709\u8fd9\u4e48\u7b80\u5355. \u5047\u8bbe\u53c8\u6709\u5176\u4ed6\u9700\u6c42, \u6c60\u5858\u91cc\u9762\u8fd8\u6709\u690d\u7269\u751f\u957f...... class Algae def initialize(name) @name = name end def grow puts(\"The Algae #{@name} soaks up the sun and grows\") end end def WaterLilly def initialize(name) @name = name end def grow puts(\"The water lily #{@name} floats, soaks up the sun, and grows\") end end \u5047\u8bbe\u5728\u6c60\u5858\u91cc\u53c8\u6709\u690d\u7269\u53c8\u6709\u52a8\u7269, \u90a3\u4e48\u6211\u4eec\u6309\u7167\u4e0a\u9762\u7684\u521b\u5efa\u5b50\u7c7b\u7684\u65b9\u5f0f\u6765\u505a: class Pond def initialize(number_animals, number_plants) @animals = [] number_animals.times do |i| animal = new_animal(\"Animal#{i}\") @animals << animal end @plants = [] number_plants.times do |i| plant = new_plant(\"Plant#{i}\") @plants << plant end end def simulate_one_day @plants.each {|plant| plant.grow} @animals.each {|animal| animal.speak} @animals.each {|animal| animal.eat} @animals.each {|animal| animal.sleep} end end class DuckWaterLilyPond < Pond def new_animal(name) Duck.new(name) end def new_plant(name) WaterLilly.new(name) end end class FrogAlgaePond < Pond def new_animal(name) Frog.new(name) end def new_plant(name) Algae.new(name) end end pond = DuckWaterLilyPond.new(3, 4) pond.simulate_one_day pond = FrogAlgaePond.new(3, 4) pond.simulate_one_day \u6211\u4eec\u53ef\u4ee5\u628a\u521b\u5efa\u5b9e\u4f8b\u7684\u4e24\u4e2a\u65b9\u6cd5\u7528\u53c2\u6570\u5316\u7684\u65b9\u5f0f\u7edf\u4e00\u6210\u4e00\u4e2a\u65b9\u6cd5, \u5c31\u53d8\u6210: class Pond def initialize(number_animals, number_plants) @animals = [] number_animals.times do |i| animal = new_organism(:animal, \"Animal#{i}\") @animals << animal end @plants = [] number_plants.times do |i| plant = new_organism(:plant, \"Plant#{i}\") @plants << plant end end def simulate_one_day @plants.each {|plant| plant.grow} @animals.each {|animal| animal.speak} @animals.each {|animal| animal.eat} @animals.each {|animal| animal.sleep} end end class DuckWaterLilyPond < Pond def new_organism(type, name) if type == :animal Duck.new(name) elsif type == :plant WaterLilly.new(name) else raise \"Unknown organism type: #{type}\" end end end class FrogAlgaePond < Pond def new_organism(type, name) if type == :animal Frog.new(name) elsif type == :plant Algae.new(name) else raise \"Unknown organism type: #{type}\" end end end pond = DuckWaterLilyPond.new(3, 4) pond.simulate_one_day pond = FrogAlgaePond.new(3, 4) pond.simulate_one_day \u5728Ruby\u91ccclass\u4e5f\u662f\u5bf9\u8c61, \u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u53c2\u6570, \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u628a\u4e0a\u9762\u7684\u4ee3\u7801\u7b80\u5316\u4e3a: class Pond def initialize(number_animals, animal_class, number_plants, plant_class) @animal_class = animal_class @plant_class = plant_class @animals = [] number_animals.times do |i| animal = new_organism(:animal, \"Animal#{i}\") @animals << animal end @plants = [] number_plants.times do |i| plant = new_organism(:plant, \"Plant#{i}\") @plants << plant end end def simulate_one_day @plants.each {|plant| plant.grow} @animals.each {|animal| animal.speak} @animals.each {|animal| animal.eat} @animals.each {|animal| animal.sleep} end def new_organism(type, name) if type == :animal @animal_class.new(name) elsif type == :plant @plant_class.new(name) else raise \"Unknown organism type: #{type}\" end end end pond = Pond.new(3, Duck, 4, WaterLilly) pond.simulate_one_day pond = Pond.new(3, Frog, 4, Algae) pond.simulate_one_day \u6211\u4eec\u80fd\u4e0d\u80fd\u8fdb\u4e00\u6b65\u7b80\u5316, \u5c06\u4e24\u4e2a\u751f\u7269\u7c7b\u7edf\u4e00\u5728\u4e00\u8d77\u5462: class Pond def initialize(number_animals, number_plants, organism_factory) @organism_factory = organism_factory @animals = [] number_animals.times do |i| animal = @organism_factory.new_animal(\"Animal#{i}\") @animals << animal end @plants = [] number_plants.times do |i| plant = @organism_factory.new_plant(\"Plant#{i}\") @plants << plant end end def simulate_one_day @plants.each {|plant| plant.grow} @animals.each {|animal| animal.speak} @animals.each {|animal| animal.eat} @animals.each {|animal| animal.sleep} end end class OrganismFactory def initialize(plant_class, animal_class) @plant_class = plant_class @animal_class = animal_class end def new_animal(name) @animal_class.new(name) end def new_plant(name) @plant_class.new(name) end end waterlilly_duck_factory = OrganismFactory.new(WaterLilly, Duck) pond = Pond.new(3, 4, waterlilly_duck_factory) pond.simulate_one_day \u597d\u4e86, \u6211\u4eec\u5df2\u7ecf\u8bf4\u7684\u591f\u591a\u4e86, \u8fd9\u5c31\u662f\u5de5\u5382\u6a21\u5f0f. \u6211\u4eec\u9700\u8981\u6ce8\u610f\u7684\u662f, \u4e0d\u8981\u6ee5\u7528, \u5982\u679c\u53ea\u662f\u5f88\u7b80\u5355\u7684\u9700\u6c42, \u5f88\u5c11\u7684\u7c7b, \u90a3\u4e48\u540e\u9762\u7684\u90a3\u4e9b\u201c\u4f18\u5316\u201d\u90fd\u662f\u591a\u4f59\u7684.","title":"Factory"},{"location":"design patterns/Interprete/","text":"\u5728\u77f3\u5668\u65f6\u4ee3, \u6570\u636e\u5e93\u7684\u64cd\u4f5c\u90fd\u662f\u7531\u6570\u636e\u5e93\u4e13\u5bb6\u5728\u505a. \u76f4\u5230SQL\u8bed\u8a00\u7684\u51fa\u73b0, \u7b80\u5355\u7684\u8bed\u8a00\u5c31\u53ef\u4ee5\u6267\u884c\u5f88\u591a\u6570\u636e\u5e93\u64cd\u4f5c. \u8fd8\u6709web\u9875\u9762, \u4ee5\u524d\u4e5f\u662f\u7531\u4e13\u4e1a\u5de5\u7a0b\u5e08\u7ecf\u8fc7\u5927\u91cf\u7684\u5de5\u4f5c\u6765\u5b8c\u6210, \u73b0\u5728, \u4e2d\u5b66\u751f\u90fd\u80fd\u901a\u8fc7HTML\u8bed\u8a00\u6765\u6e32\u67d3\u754c\u9762. \u8fd9\u4e9b\u90fd\u5f52\u529f\u4e8eInterpreter. Interpreter pattern\u88ab\u5ffd\u7565, \u56e0\u4e3a\u7a0b\u5e8f\u5458\u53ef\u80fd\u5f88\u64c5\u957fweb\u5f00\u53d1\u548c\u6570\u636e\u5e93\u8bbe\u8ba1, \u4f46\u662f\u5374\u5f88\u5c11\u64c5\u957fAST\u548cparser. \u63a5\u4e0b\u91cc\u6211\u4eec\u6765\u89e3\u91caAST\u548cparser. \u6211\u4eec\u6709\u4e00\u6bb5\u641c\u7d22\u6587\u4ef6\u7684\u4ee3\u7801, \u6709\u975e\u5e38\u591a\u4e30\u5bcc\u7684\u529f\u80fd, \u6211\u4eec\u53ef\u4ee5\u641c\u7d22\u6240\u6709\u6587\u4ef6, \u53ef\u4ee5\u6839\u636e\u6587\u4ef6\u540d, \u662f\u5426\u53ef\u5199, \u6587\u4ef6\u5927\u5c0f\u6765\u641c\u7d22, \u4e5f\u53ef\u4ee5\u505aor and \u641c\u7d22. require 'find' class Expression # Common expression code will go here soon... end class All < Expression def evaluate(dir) results = [] Find.find(dir) do |p| next unless File.file?(p) results << p end results end end class FileName < Expression def initialize(pattern) @pattern = pattern end def evaluate(dir) results = [] Find.find(dir) do |p| next unless File.file?(p) name = File.basename(p) results << p if File.fnmatch(@pattern, name) end results end end expr_all = All.new files = expr_all.evaluate('.') puts(files) puts('-------------------------------------') expr_txt = FileName.new('*.txt') txts = expr_txt.evaluate('.') puts(txts) puts('-------------------------------------') class Bigger < Expression def initialize(size) @size = size end def evaluate(dir) results = [] Find.find(dir) do |p| next unless File.file?(p) results << p if(File.size(p) > @size) end results end end class Writable < Expression def evaluate(dir) results = [] Find.find(dir) do |p| next unless File.file?(p) results << p if(File.writable?(p)) end results end end class Not < Expression def initialize(expression) @expression = expression end def evaluate(dir) All.new.evaluate(dir) - @expression.evaluate(dir) end end expr_not_writable = Not.new(Writable.new) readonly_files = expr_not_writable.evaluate('.') puts(readonly_files) puts('-------------------------------------') small_expr = Not.new(Bigger.new(1024)) small_files = small_expr.evaluate('.') puts(small_files) puts('-------------------------------------') not_txt_expr = Not.new(FileName.new('*.txt')) not_txts = not_txt_expr.evaluate('.') puts(not_txts) puts('-------------------------------------') class Or < Expression def initialize(expression1, expression2) @expression1 = expression1 @expression2 = expression2 end def evaluate(dir) result1 = @expression1.evaluate(dir) result2 = @expression2.evaluate(dir) (result1 + result2).sort.uniq end end big_or_txt_expr = Or.new(Bigger.new(1024), FileName.new('*.mp3')) big_or_txts = big_or_txt_expr.evaluate('.') puts(big_or_txts) puts('-------------------------------------') class And < Expression def initialize(expression1, expression2) @expression1 = expression1 @expression2 = expression2 end def evaluate(dir) result1 = @expression1.evaluate(dir) result2 = @expression2.evaluate(dir) (result1 & result2) end end complex_expression = And.new( And.new(Bigger.new(1024), FileName.new('*.txt')), Not.new(Writable.new)) complex_result = complex_expression.evaluate('.') puts(complex_result) puts('-------------------------------------') \u4f46\u662f\u8fd9\u4e9b\u64cd\u4f5c\u5bf9\u4e8e\u201c\u7528\u6237\u201d\u6765\u8bf4\u592a\u590d\u6742\u4e86, \u6211\u4eec\u53ef\u4e0d\u53ef\u4ee5\u63d0\u4f9b\u7b80\u5355\u7684\u8bed\u53e5\u7ed9\u201c\u7528\u6237\u201d, \u6765\u6267\u884c\u8fd9\u4e9b\u590d\u6742\u7684\u64cd\u4f5c. \u90a3\u4e48\u6211\u4eec\u9996\u5148\u8981\u505a\u7684\u662f: \u62bd\u8c61\u51faAST(abstract syntax tree), \u8fd9\u91cc\u4e0d\u8be6\u8ff0\u4e86, \u53cd\u6b63\u5c31\u662f\u9700\u8981\u6574\u7406\u51fa\u4e00\u4e2a\u62bd\u8c61\u5316\u7684\u6a21\u578b. \u6bd4\u5982\u6211\u4eec\u9700\u8981\u67e5\u627e\u5927\u5c0f\u5927\u4e8e1024kb, \u7c7b\u578b\u662f.rb, \u5e76\u4e14\u662f\u53ef\u5199\u7684\u6587\u4ef6, \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u62bd\u8c61\u6210: and (and(bigger 1024)(filename *.rb)) writable \u90a3\u4e48\u6211\u4eec\u9700\u8981\u628a\u8fd9\u4e2a\u8bed\u53e5parser\u6210\u80fd\u6267\u884c\u7684\u4ee3\u7801, \u8fd9\u6837\u6211\u4eec\u5c31\u9700\u8981\u6784\u5efa\u4e00\u4e2aparser: class Parser def initialize(text) @tokens = text.scan(/\\(|\\)|[\\w\\.\\*]+/) end def next_token @tokens.shift end def expression token = next_token if token == nil return nil elsif token == '(' result = expression raise 'Expected )' unless next_token == ')' result elsif token == 'all' return All.new elsif token == 'writable' return Writable.new elsif token == 'bigger' return Bigger.new(next_token.to_i) elsif token == 'filename' return FileName.new(next_token) elsif token == 'not' return Not.new(expression) elsif token == 'and' return And.new(expression, expression) elsif token == 'or' return Or.new(expression, expression) else raise \"Unexpected token: #{token}\" end end end parser = Parser.new \"and (and(bigger 1024)(filename *.rb)) writable\" ast = parser.expression result = ast.evaluate('.') puts(result) \u8fd9\u5c31\u662finterpreter pattern.","title":"Interprete"},{"location":"design patterns/Iterator/","text":"\u5728GOF\u91cc\u662f\u8fd9\u4e48\u63cf\u8ff0Iterator\u7684: Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation \u83b7\u53d6\u96c6\u5408\u7684\u5143\u7d20, \u800c\u4e0d\u7528\u7ba1\u8fd9\u4e2a\u5143\u7d20\u5185\u90e8\u7684\u673a\u5236. \u6211\u4eec\u53ef\u4ee5\u8fd9\u4e48\u5b9e\u73b0: class ArrayIterator def initialize(array) @array = array @index = 0 end def has_next? @index < @array.length end def item @array[@index] end def next_item value = @array[@index] @index += 1 value end end array = ['red', 'green', 'blue'] i = ArrayIterator.new(array) while i.has_next? puts(\"item: #{i.next_item}\") end i = ArrayIterator.new('abc') while i.has_next? puts(\"item: #{i.next_item}\") end \u8fed\u4ee3\u5668\u6709\u4ec0\u4e48\u7528\u5462? \u4e0b\u9762\u4e3e\u4e2a\u4f8b\u5b50, \u5c06\u4e24\u4e2a\u5df2\u7ecf\u6392\u5e8f\u7684list\u5408\u5e76\u6210\u4e00\u4e2alist, \u4e5f\u662f\u6392\u5e8f\u597d\u7684 def merged (array1, array2) result = [] iterator1 = ArrayIterator.new(array1) iterator2 = ArrayIterator.new(array2) while (iterator1.has_next? && iterator2.has_next?) if (iterator1.item < iterator2.item) result << iterator1.next_item else result << iterator2.next_item end end while (iterator1.has_next?) result << iterator1.next_item end while (iterator2.has_next?) result << iterator2.next_item end result end puts(merged([1, 2, 3], [2, 4, 5])) \u5728Python\u91cc\u9762\u7528yield\u5c31\u53ef\u4ee5\u5b9e\u73b0\u8fed\u4ee3\u5668 \u4e0a\u9762\u53ea\u662f\u4e3e\u4e86\u4e00\u4e2a\u8fed\u4ee3\u5668\u7684\u7b80\u5355\u4f8b\u5b50, \u5b9e\u9645\u4e0a\u8fd8\u6709\u5f88\u591a\u7528\u5904, \u6bd4\u5982\u8282\u7ea6\u5185\u5b58\u7b49","title":"Iterator"},{"location":"design patterns/Observer/","text":"\u5047\u8bbe\u6709\u8fd9\u6837\u7684\u60c5\u666f, \u804c\u5458\u7684\u85aa\u8d44\u53d8\u5316\u4e86, \u9700\u8981\u901a\u77e5\u5230\u85aa\u8d44\u90e8\u95e8, \u6211\u4eec\u53ef\u4ee5\u8fd9\u4e48\u5b9e\u73b0: class Employee attr_reader :name attr_accessor :title, :salary def initialize( name, title, salary, payroll ) @name = name @title = title @salary = salary @payroll = payroll end def salary=(new_salary) @salary = new_salary @payroll.update(self) end end class Payroll def update( changed_employee ) puts(\"Cut a new check for #{changed_employee.name}!\") puts(\"His salary is now #{changed_employee.salary}!\") end end payroll = Payroll.new fred = Employee.new('Fred', 'Crane Operator', 30000, payroll) fred.salary = 35000 \u8fd9\u6837\u5b9e\u73b0\u6709\u4e24\u4e2a\u95ee\u9898: Employee\u548cPayroll\u4e24\u4e2a\u7c7b\u201c\u7f20\u7ed5\u201d\u5728\u4e00\u8d77\u4e86 \u5982\u679c\u8fd8\u9700\u8981\u901a\u77e5\u5230\u5176\u4ed6\u90e8\u95e8, \u6211\u4eec\u8fd8\u9700\u8981\u4fee\u6539Employee\u7684\u4ee3\u7801, \u6bd4\u5982\u589e\u52a0initialize\u7684\u53c2\u6570, \u4fee\u6539salary=\u51fd\u6570 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898, \u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u505a: class Employee attr_reader :name attr_accessor :title, :salary def initialize( name, title, salary ) @name = name @title = title @salary = salary @observers = [] end def salary=(new_salary) @salary = new_salary @notify_observers end def notify_observers @observers.each do |observer| observer.update(self) end end def add_observer(observer) @observers << observer end def delete_observer(observer) @observers.delete(observer) end end class Payroll def update( changed_employee ) puts(\"Cut a new check for #{changed_employee.name}!\") puts(\"His salary is now #{changed_employee.salary}!\") end end fred = Employee.new('Fred', 'Crane Operator', 30000.0) payroll = Payroll.new fred.add_observer( payroll ) fred.salary=35000.0 class TaxMan def update( changed_employee ) puts(\"Send #{changed_employee.name} a new tax bill!\") end end tax_man = TaxMan.new fred.add_observer(tax_man) fred.salary=90000.0 \u8fd9\u6837\u6211\u4eec\u5c31\u89e3\u51b3\u4e86\u4e0a\u9762\u7684\u4e24\u4e2a\u95ee\u9898, \u8fd8\u6709\u6ca1\u6709\u4f18\u5316\u7a7a\u95f4\u5462? \u5bf9\u4e8eEmployee\u6765\u8bf4, \u53ea\u9700\u5173\u6ce8\u81ea\u8eab\u7684\u903b\u8f91\u5373\u53ef, \u901a\u77e5Payroll\u8fd9\u4e9bobserver\u7684\u4efb\u52a1\u662f\u9644\u52a0\u7684\u5de5\u4f5c, \u628anotify_observer, add_obser, delete_observer\u653e\u5728\u7c7b\u91cc\u9762, \u5e72\u6270\u4e86\u81ea\u8eab\u7684\u903b\u8f91, \u5207\u8ba9\u4ee3\u7801\u770b\u7740\u5f88\u4e71\u5f88\u5e9e\u5927, \u6211\u4eec\u53ef\u4ee5\u6309\u7167strategy\u8bbe\u8ba1\u6a21\u5f0f\u4e00\u6837, \u628a\u901a\u77e5\u7684\u4efb\u52a1\u72ec\u7acb\u51fa\u6765 module Subject def initialize @observers=[] end def add_observer(observer) @observers << observer end def delete_observer(observer) @observer.delete(observer) end def notify_observers @observers.each do |observer| observer.update(self) end end end class Employee include Subject attr_reader :name, :title attr_reader :salary def initialize(name, title, salary) super() @name = name @title = title @salary = salary end def salary=(new_salary) @salary = new_salary notify_observers end end class Payroll def update(changed_employee) puts(\"Cut a new check for #{changed_employee.name}!\") puts(\"His salary is now #{changed_employee.salary}\") end end fred = Employee.new(\"Fred Flintstone\", \"Crane Operator\", 30000.0) payroll = Payroll.new fred.add_observer(payroll) fred.salary = 35000.0 class TaxMan def update(changed_employee) puts(\"Send #{changed_employee.name} a new tax bill!\") end end tax_man = TaxMan.new fred.add_observer(tax_man) fred.salary=90000.0 \u8fd9\u91cc\u7528\u5230\u4e86Ruby\u7684module, \u56e0\u4e3aRuby\u53ea\u80fd\u7ee7\u627f\u4e00\u4e2a\u7236\u7c7b, \u5982\u679c\u628aSubject\u5199\u6210\u4e00\u4e2a\u7c7b, Employee\u7ee7\u627f\u7684\u8bdd, \u5c31\u4e0d\u80fd\u7ee7\u627f\u5176\u4ed6\u7236\u7c7b\u4e86, \u5728Python\u91cc\u53ef\u4ee5\u7ee7\u627f\u591a\u4e2a\u7c7b, \u5c31\u6ca1\u6709\u8fd9\u4e2a\u95ee\u9898 \u8fd9\u5c31\u662fObserver\u89c2\u5bdf\u8005\u8bbe\u8ba1\u6a21\u5f0f, \u521b\u5efa\u4e00\u4e2a\u5e72\u51c0\u7684\u63a5\u53e3, \u5c06\u88ab\u89c2\u5bdf\u8005\u548c\u89c2\u5bdf\u8005\u9694\u79bb\u5f00\u6765, \u5b9e\u73b0\u751f\u4ea7\u548c\u6d88\u8d39, \u800c\u4e0d\u7528\u5c06\u4e24\u8005\u8026\u5408\u5728\u4e00\u8d77 The Observer pattern allows you to build components that know about the activities of other components without having to tightly couple everything together in an unmanageable mess of code-flavored spaghetti. By creating a clean interface between the source of the news (the observable object) and the consumer of that news (the observers), the Observer pattern moves the news without tangling things up.","title":"Observer"},{"location":"design patterns/Proxy/","text":"Proxies are the con artists of the programming world: They pretend to be some other object when they are not, in fact, that object. Inside the proxy is hidden a reference to the other, real object\u2014an object that the GoF referred to as the subject. \u4e00\u4e2a\u5bf9\u8c61, \u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u7ed9\u7528\u6237, \u4f46\u6709\u65f6\u5019\u4e5f\u7279\u6b8a\u9700\u6c42, \u6bd4\u5982\u7ed9\u7279\u5b9a\u7684\u7528\u6237\u4e0d\u540c\u7684\u6743\u9650, \u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u5230\u4ee3\u7406\u8bbe\u8ba1\u6a21\u5f0f, \u4f2a\u88c5\u6210\u540c\u4e00\u4e2a\u5bf9\u8c61, \u4f46\u662f\u662f\u865a\u5047\u7684, \u4f46\u5185\u6838\u662f\u6307\u5411\u771f\u6b63\u7684\u5bf9\u8c61. \u4f8b\u5982\u94f6\u884c\u8d26\u53f7\u5bf9\u8c61: class BankAccount attr_reader :balance def initialize(starting_balance=0) @balance = starting_balance end def deposit(amount) @balance += amount end def withdraw(amount) @balance -= amount end end account = BankAccount.new(100) account.deposit(50) account.withdraw(10) \u5047\u8bbe\u6211\u4eec\u5bf9\u7279\u5b9a\u7684\u7528\u6237\u68c0\u67e5\u6743\u9650, \u6211\u4eec\u53ef\u4ee5\u5199\u4e00\u4e2a\u4ee3\u7406, \u800c\u4e0d\u662f\u4fee\u6539\u539f\u59cb\u7684BankAccount require 'etc' class AccountProtectionProxy def initialize(real_account, owner_name) @subject = real_account @owner_name = owner_name end def deposit(amount) check_access return @subject.depost(amount) end def withdraw(amount) check_access return @subject.withdraw(amount) end def balance check_access return @subject.balance end def check_access if Etc.getlogin != @owner_name raise \"Illegal access: #{Etc.getlogin} cannot access account.\" end end end","title":"Proxy"},{"location":"design patterns/Singleton/","text":"The motivation behind the Singleton pattern is very simple: There are some things that are unique. Programs frequently have a single configuration file. It is not unusual for a program to let you know how it is doing via a single log file. GUI applications frequently have a one main window, and they typically take input from exactly one keyboard. Many applications need to talk to exactly one database. If you only ever have one instance of a class and a lot of code that needs access to that instance, it seems silly to pass the object from one method to another. In this kind of situation, the GoF suggest that you build a singleton\u2014a class that can have only one instance and that provides global access to that one instance. \u6211\u4eec\u53ef\u4ee5\u5728class\u5c42\u9762\u5b9e\u73b0\u5355\u4f8b\u6a21\u5f0f, \u4e5f\u662fGOF\u63a8\u8350\u7684\u6a21\u5f0f, \u4e5f\u53ef\u4ee5\u7528\u5168\u5c40\u53d8\u91cf\u6765\u5b9e\u73b0, \u4f46\u662f\u5728\u552f\u4e00\u6027\u65b9\u9762\u662f\u6b20\u7f3a\u7684.","title":"Singleton"},{"location":"design patterns/Strategy/","text":"\u5728Termplate Method\u6a21\u677f\u65b9\u6cd5\u7684\u8bbe\u8ba1\u6a21\u5f0f\u91cc, \u6211\u4eec\u8bbe\u8ba1\u4e86\u4e00\u4e2a\u7236\u7c7b, \u7136\u540e\u6839\u636e\u4e0d\u540c\u7684\u6587\u4ef6\u683c\u5f0f\u7528\u4e0d\u540c\u7684\u5b50\u7c7b\u53bb\u5b9e\u73b0, \u8fd9\u6837\u7684\u8bdd, \u6709\u591a\u5c11\u79cd\u6587\u4ef6\u683c\u5f0f\u5c31\u9700\u8981\u521b\u5efa\u591a\u5c11\u4e2a\u5b50\u7c7b. \u8fd9\u6837\u6709\u6ca1\u6709\u89c9\u5f97\u5f88\u4e0d\u7075\u6d3b? \u8bbe\u8ba1\u6a21\u5f0f\u7684\u5176\u4e2d\u4e00\u4e2a\u539f\u5219\u662f: Prefer composition over inheritance. \u5728\u4ea4\u901a\u5de5\u5177\u7684\u4f8b\u5b50\u91cc, \u6211\u4eec\u628aengine\u8fd9\u4e2a\u5173\u952e\u56e0\u7d20\u72ec\u7acb\u51fa\u6765\u505a\u6210\u4e86\u4e00\u4e2a\u7ec4\u4ef6, \u8fd9\u6837\u8fd9\u4e2a\u7ec4\u4ef6\u53ef\u4ee5\u7075\u6d3b\u7684\u914d\u7f6e, \u7136\u540e\u4ea4\u901a\u5de5\u5177\u4e5f\u53ef\u4ee5\u9009\u62e9\u662f\u5426\u88c5\u914d\u8fd9\u4e2a\u7ec4\u4ef6. \u6211\u4eec\u4f9d\u7167\u8fd9\u4e2a\u539f\u5219\u6765\u628a\u5bfc\u51fa\u6587\u672c\u6539\u9020\u4e00\u4e0b, \u628a\u6838\u5fc3\u7b97\u6cd5\u72ec\u7acb\u51fa\u6765 class HTMLFormatter def output_report(context) puts('<html>') puts(' <head>') puts(\" <title>#{context.title}</title>\") puts(' </head>') puts(' <body>') context.text.each do |line| puts(\" <p>#{line}</p>\") end puts(' </body>') puts('</html>') end end class PlainTextFormatter def output_report(context) puts(\"***** #{context.title} *****\") context.text.each do |line| puts(line) end end end class Report attr_reader :title, :text attr_accessor :formatter def initialize(formatter) @title = 'Monthly Report' @text = ['Things are going', 'really, really well.'] @formatter = formatter end def output_report @formatter.output_report(self) end end \u8fd9\u6837, \u6211\u4eec\u5c31\u4e0d\u9700\u8981\u7528\u7ee7\u627f\u7684\u65b9\u6cd5\u521b\u5efa\u591a\u4e2a\u5b50\u7c7b\u4e86, \u53ea\u9700\u8981\u4e00\u4e2aReport\u7c7b\u4e86, \u5728\u8fd9\u4e2a\u7c7b\u91cc\u9762, \u6211\u4eec\u91cd\u65b0\u5b9a\u4e49\u4e86 output_report \u51fd\u6570, \u8fd9\u5c31\u662f\u8bbe\u8ba1\u6a21\u5f0f\u7684\u53e6\u4e00\u4e2a\u539f\u5219: Delegate, delegate, delegate \u8fd9\u91cc\u53ef\u80fd\u6709\u4e00\u4e2a\u7591\u95ee, \u6211\u4eec\u4e0d\u662f\u4e00\u6837\u521b\u5efa\u4e86\u591a\u4e2a\u7c7b\u5417? HTMLFormatter, PlainTextFormatter \u662f\u7684, \u4f46\u662f\u5728Ruby\u91cc, \u6211\u4eec\u53ef\u4ee5\u7528proc\u7684\u65b9\u5f0f\u53bb\u505a, \u8fd9\u91cc\u4e0d\u505a\u8868\u8ff0. \u5728Python\u91cc, \u6211\u4eec\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5b9a\u4e49\u51fd\u6570, \u800c\u4e0d\u662f\u5b9a\u4e49\u7c7b. \u7b56\u7565\u8bbe\u8ba1\u6a21\u5f0f, \u907f\u514d\u4e86\u7ee7\u627f\u521b\u5efa\u591a\u4e2a\u5b50\u7c7b, \u628a\u6838\u5fc3\u7b97\u6cd5\u72ec\u7acb\u51fa\u6765\u505a\u6210\u4e86\u4e00\u4e2a\u53ef\u88c5\u914d\u7684\u7ec4\u4ef6, \u5982\u540c\u4ea4\u901a\u5de5\u5177\u4e00\u6837, \u53ef\u4ee5\u88c5\u4e0d\u540c\u7684\u5f15\u64ce, \u4e5f\u53ef\u4ee5\u4e0d\u88c5\u914d\u5f15\u64ce The Strategy pattern is a delegation-based approach to solving the same problem as the Template Method pattern. Instead of teasing out the variable parts of your algo- rithm and pushing them down into subclasses, you simply implement each version of your algorithm as a separate object","title":"Strategy"},{"location":"design patterns/Template Method/","text":"\u76f4\u63a5\u7528\u4ee3\u7801\u6765\u8bf4\u660e \u5047\u8bbe\u6211\u4eec\u6709\u8f93\u51fa\u6587\u672c\u7684\u9700\u6c42, \u57fa\u672c\u7684\u5b9e\u73b0\u662f\u8fd9\u6837\u7684: class Report def initialize @title = 'Monthly Report' @text = [ 'Things are going', 'really, really well.' ] end def output_report puts('<html>') puts(' <head>') puts(\" <title>#{@title}</title>\") puts(' </head>') puts(' <body>') @text.each do |line| puts(\" <p>#{line}</p>\" ) end puts(' </body>') puts('</html>') end end report = Report.new report.output_report \u8fd9\u662f\u8f93\u51faHTML\u683c\u5f0f\u7684\u6587\u672c, \u90a3\u52a0\u5165\u53c8\u6709\u8f93\u51faplain text\u7684\u9700\u6c42\u5462, \u6211\u4eec\u4fee\u6539\u4e00\u4e0b: class Report def initialize @title = 'Monthly Report' @text = ['Things are going', 'really, really well.'] end def output_report(format) if format == :plain puts(\"*** #{@title} ***\") elsif format == :html puts('<html>') puts(' <head>') puts(\" <title>#{@title}</title>\") puts(' </head>') puts(' <body>') else raise \"Unknown format: #{format}\" end @text.each do |line| if format == :plain puts(line) else puts(\" <p>#{line}</p>\" ) end end if format == :html puts(' </body>') puts('</html>') end end end \u4ee3\u7801\u5f88\u590d\u6742\u6709\u6ca1\u6709? \u5982\u679c\u518d\u589e\u52a0\u683c\u5f0f, \u6309\u7167\u8fd9\u6837\u7684\u65b9\u5f0f\u5199\u4e0b\u53bb, \u90a3\u4ee3\u7801\u5c31\u592a\u7cdf\u7cd5\u4e86. \u800c\u4e14\u8fdd\u80cc\u4e86\u8bbe\u8ba1\u6a21\u5f0f\u7684\u539f\u5219\u4e4b\u4e00: Separate out the things that change from those that stay the same, \u5c06\u4e0d\u53d8\u7684\u4e0e\u53ef\u53d8\u7684\u5206\u5f00 \u90a3\u4e48\u6211\u4eec\u5206\u6790\u4e00\u4e0b\u4ec0\u4e48\u662f\u53ef\u53d8\u7684, \u4ec0\u4e48\u662f\u4e0d\u53d8\u7684. \u4e0d\u8bba\u662fHTML\u683c\u5f0f\u8fd8\u662fplain text\u683c\u5f0f, \u90fd\u9700\u8981\u8f93\u51fa\u51e0\u4e2a\u56fa\u5b9a\u7684\u90e8\u5206, \u53ea\u662f\u5404\u4e2a\u90e8\u5206\u6839\u636e\u4e0d\u540c\u7684\u683c\u5f0f\u8f93\u51fa\u5185\u5bb9\u4e0d\u4e00\u6837, \u4ee3\u7801\u53ef\u4ee5\u8fd9\u6837\u4f18\u5316 class Report def initialize @title = 'MonthlyReport' @text = ['Things are going', 'really, really well.'] end def output_report output_start output_title(@title) output_body_start for line in @text output_line(line) end output_body_end output_end end def output_start puts('<html>') end def output_title(title) puts(' <head>') puts(\" <title>#{title}</title>\") puts(' </head>') end def output_body_start puts(' <body>') end def output_line(line) puts(\" <p>#{line}\") end def output_body_end puts(' </body>') end def output_end puts('</html') end end class HTMLReport < Report end class PlainTextReport < Report def output_start end def output_title(title) puts(\"*** #{title} ***\") end def output_body_start end def output_line(line) puts(\"#{line}\") end def output_body_end end def output_end end end report = HTMLReport.new report.output_report report = PlainTextReport.new report.output_report \u6211\u4eec\u5728\u57fa\u7c7b\u91cc\u5b9a\u4e49\u4e86\u201c\u4e0d\u53d8\u201d\u7684\u9aa8\u67b6, \u5728\u5b50\u7c7b\u4e86\u590d\u5199\u4e86\u201c\u53ef\u53d8\u201d\u7684\u65b9\u6cd5, \u8fd9\u6837\u4e0d\u8bba\u591a\u5c11\u79cd\u683c\u5f0f, \u9aa8\u67b6\u90fd\u53ef\u4ee5\u4e0d\u53d8, \u53ea\u9700\u589e\u52a0\u5b50\u7c7b, \u590d\u5199\u65b9\u6cd5\u5c31\u53ef\u4ee5\u4e86. The Template Method pattern is simply a fancy way of saying that if you want to vary an algorithm, one way to do so is to code the invariant part in a base class and to encapsulate the variable parts in methods that are defined by a number of subclasses. The base class can simply leave the methods completely undefined\u2014in that case, the subclasses must supply the methods. Alternatively, the base class can provide a default implementation for the methods that the subclasses can override if they want.","title":"Template"}]}